import aiohttp
import asyncio
from xml.etree import ElementTree as ET

# Define the SOAP endpoint URL for the Calculator service
soap_url = "http://www.dneonline.com/calculator.asmx"

# SOAP request template for Add operation
soap_request_template = """<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://tempuri.org/">
   <soapenv:Header/>
   <soapenv:Body>
      <web:Add>
         <!--Optional:-->
         <web:intA>{int_a}</web:intA>
         <!--Optional:-->
         <web:intB>{int_b}</web:intB>
      </web:Add>
   </soapenv:Body>
</soapenv:Envelope>
"""

# Maximum number of retries
max_retries = 3

async def perform_addition(int_a, int_b):
    # Retry logic
    for retry in range(max_retries):
        try:
            # Build SOAP request with parameters
            soap_request = soap_request_template.format(int_a=int_a, int_b=int_b)

            # Define headers for SOAP request
            headers = {
                'Content-Type': 'text/xml',
                'SOAPAction': 'http://tempuri.org/Add',
            }

            async with aiohttp.ClientSession() as session:
                # Send SOAP request using aiohttp library
                async with session.post(soap_url, data=soap_request, headers=headers, timeout=10) as response:
                    # Check if the request was successful (status code 200)
                    if response.status == 200:
                        # Parse the XML response
                        content = await response.text()
                        root = ET.fromstring(content)
                        
                        # Find any child node with text content (handles different response structures)
                        result_node = next((child for child in root.iter() if child.text is not None), None)

                        if result_node is not None:
                            result = result_node.text
                            # Print the result of addition
                            print(f"Result of adding {int_a} and {int_b}: {result}")
                        else:
                            print("Error: Unable to extract result from SOAP response")

                        # Break out of the retry loop if successful
                        break

                    else:
                        print(f"Error: HTTP Status Code {response.status}")
                        # Retry if the status code is not 200

        except Exception as e:
            print(f"Error connecting to the SOAP service (Attempt {retry + 1}/{max_retries}): {e}")

# Example: Perform addition of 5 and 10 asynchronously
async def main():
    await perform_addition(5, 10)

# Run the asyncio event loop
asyncio.run(main())
